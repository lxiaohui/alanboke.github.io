import{_ as n,c as a,b as e,o as l}from"./app-Bk2wEOlk.js";const i="/alanboke.github.io/assets/image-DmiTuXCN.png",t={};function r(c,s){return l(),a("div",null,s[0]||(s[0]=[e(`<p>本文档旨在记录一些在实际开发工作中用到的实用且高效的 Git 命令和技巧，帮助大家更加高效地使用 Git 进行版本控制。</p><h2 id="_1-git-stash" tabindex="-1"><a class="header-anchor" href="#_1-git-stash"><span>1. git stash</span></a></h2><p>非常喜欢的一个命令，<code>git stash</code> 适用于临时保存当前工作目录中的更改，以便稍后恢复。它可以让你在切换分支或执行其他操作时，暂时“隐藏”当前的工作进度。</p><h3 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景"><span>1.1. 使用场景</span></a></h3><ul><li><strong>切换分支</strong>：当你正在一个分支上工作，但需要切换到另一个分支时，可以使用 git stash 保存当前的工作进度，然后再切换回原来的分支时恢复。</li><li><strong>清理工作目录</strong>：当你需要一个干净的工作目录来执行某些操作（如构建、测试等）时，可以使用 git stash 临时保存更改。</li><li><strong>保存未完成的工作</strong>：当你需要暂时离开，但又不想丢失当前的工作进度时，可以使用 git stash 保存。</li></ul><h3 id="_1-2-命令使用" tabindex="-1"><a class="header-anchor" href="#_1-2-命令使用"><span>1.2. 命令使用</span></a></h3><ul><li><strong>git stash save [message]</strong>：保存当前工作目录中的更改到 stash 列表中，并附带一条可选的消息。（如果直接执行 git stash 命令会基于最近一次提交的信息来创建一个 stash）</li><li><strong>git stash list</strong>：列出所有已保存的 stash。</li><li><strong>git stash apply [stash@{n}]</strong>：应用指定的 stash 到当前工作目录中，保留原来的 stash。</li><li><strong>git stash pop [stash@{n}]</strong>：应用并删除指定的 stash。</li><li><strong>git stash drop [stash@{n}]</strong>：删除指定的 stash。</li><li><strong>git stash clear</strong>：删除所有 stash。</li></ul><h3 id="_1-3-操作步骤" tabindex="-1"><a class="header-anchor" href="#_1-3-操作步骤"><span>1.3. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 保存当前的工作进度</span></span>
<span class="line"><span class="token function">git</span> stash save <span class="token string">&quot;Temporary changes&quot;</span> <span class="token comment"># 或者使用简写 git stash</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 查看所有已保存的 stash</span></span>
<span class="line"><span class="token function">git</span> stash list</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 应用 stash 到当前工作目录中</span></span>
<span class="line"><span class="token function">git</span> stash apply <span class="token number">0</span> <span class="token comment"># 或者使用 git stash pop (0 | @0)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 删除指定的 stash</span></span>
<span class="line"><span class="token function">git</span> stash drop @0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-git-pull-rebase" tabindex="-1"><a class="header-anchor" href="#_2-git-pull-rebase"><span>2. git pull --rebase</span></a></h2><p>先了解 <code>git merge</code> 和 <code>git rebase</code>，它两都是用于分支合并，<strong>关键在 commit 记录的处理上不同</strong>：</p><ul><li>git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。</li><li><strong>git rebase</strong>，它是 git merge 命令的一个替代方案，是一个线性的合并过程，它会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录，它可以帮助你整合分支，<strong>使历史更加线性，更简洁</strong>。 <img src="`+i+`" alt="alt text"></li></ul><table><thead><tr><th style="text-align:left;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:center;"><strong>git rebase</strong></td><td style="text-align:center;"><strong>git merge</strong></td></tr><tr><td style="text-align:left;">用途</td><td style="text-align:center;">将当前分支的修改应用于另一个分支</td><td style="text-align:center;">将两个分支的修改合并为一个新的提交</td></tr><tr><td style="text-align:left;">优点</td><td style="text-align:center;">线性提交历史，避免了合并冲突</td><td style="text-align:center;">可以更好地保留分支的历史和结构</td></tr><tr><td style="text-align:left;">缺点</td><td style="text-align:center;"><strong>可能会产生冲突</strong>，需要小心处理</td><td style="text-align:center;">可能会产生非线性提交历史，增加代码审查和维护的难度</td></tr><tr><td style="text-align:left;">使用场景</td><td style="text-align:center;">在从公共分支拉取时更新本地分支</td><td style="text-align:center;">在一个功能分支开发完成后将其合并到主分支上</td></tr><tr><td style="text-align:left;">操作方法</td><td style="text-align:center;">使用 rebase 命令将当前分支 rebase 到目标分支</td><td style="text-align:center;">使用 merge 命令将目标分支合并到当前分支</td></tr></tbody></table><p>总体而言，git merge 更适合在不同的分支之间进行协作开发，并且需要保留每个分支的历史记录和结构，而 git rebase 则更适合在一个分支上开发并且需要保持提交历史的线性结构。由于倾向于只保留一个长期分支 release 的 Git 工作流，所以比较推荐使用 <strong>rebase</strong> 的用法。</p><p>git rebase 的基础使用就不展开了，下面推荐一个比较实用的命令：<code>git pull --rebase</code></p><h3 id="_2-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本用法"><span>2.1. 基本用法</span></a></h3><p><strong>git pull --rebase</strong> 用于将远程仓库的最新更改应用到本地分支上，同时使用 rebase 而不是普通的合并（merge）。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># &lt;remote&gt; 和 &lt;branch&gt; 可省略，默认使用当前定义的远程仓库和跟踪分支</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-2-使用场景"><span>2.2. 使用场景</span></a></h3><ul><li><strong>更新本地分支</strong>：当你需要将远程仓库的最新更改应用到你的本地分支上，同时保持提交历史的线性。</li><li><strong>避免合并提交</strong>：如果你希望避免在合并过程中产生额外的合并提交。</li><li><strong>简化历史</strong>：当你希望提交历史更加清晰，更容易追踪更改时。</li></ul><h3 id="_2-3-操作步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-操作步骤"><span>2.3. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 执行命令</span></span>
<span class="line"><span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> </span>
<span class="line"><span class="token comment"># 或者指定远程仓库和分支 git pull --rebase origin main</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 解决冲突（如有）</span></span>
<span class="line"><span class="token comment"># 如果在 rebase 过程中有冲突，git 会暂停 rebase 并提示你解决冲突</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 遇到无法解决的冲突或其他问题时，可以选择放弃 rebase </span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--absort</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 解决冲突后，添加解决冲突后的文件</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>conflicted-file<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 继续 rebase 过程</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-git-reflog" tabindex="-1"><a class="header-anchor" href="#_3-git-reflog"><span>3. git reflog</span></a></h2><p><strong><code>git reflog</code></strong> 用于查看仓库的历史记录，包括对 HEAD、分支和其他引用的更改历史。</p><h3 id="_3-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-1-使用场景"><span>3.1. 使用场景</span></a></h3><ul><li><strong>恢复丢失的提交</strong>：当你不小心删除或覆盖了提交，并希望恢复这些提交时。</li><li><strong>追踪历史更改</strong>：当你需要了解某个引用（如分支或标签）的历史更改时。</li><li><strong>解决冲突</strong>：当你在 rebase 或其他操作中遇到问题时，可以使用 reflog 来查找问题的原因。</li></ul><h3 id="_3-2-操作步骤" tabindex="-1"><a class="header-anchor" href="#_3-2-操作步骤"><span>3.2. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 查看 reflog 记录</span></span>
<span class="line"><span class="token function">git</span> reflog <span class="token comment"># 或者查看特定引用记录 git reflog master</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 查找需要提交记录 &lt;commit&gt;，进行恢复或检出</span></span>
<span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-git-reset" tabindex="-1"><a class="header-anchor" href="#_4-git-reset"><span>4. git reset</span></a></h2><p><code>git reset</code> 用于重置 HEAD 或其他引用到指定的提交，并可选择性地更新工作树中的文件。</p><h3 id="_4-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_4-1-使用场景"><span>4.1. 使用场景</span></a></h3><ul><li><strong>撤销最近的提交</strong>：当你想撤销最近的一次或多次提交时。</li><li><strong>恢复丢失的提交</strong>：当你不小心删除或覆盖了提交，并希望恢复这些提交时。</li><li><strong>清理工作树</strong>：当你需要清理工作树中的未提交更改时。</li><li><strong>解决冲突</strong>：当你在 rebase 或其他操作中遇到问题时，可以使用 git reset 来回到一个干净的状态。</li></ul><h3 id="_4-2-命令使用" tabindex="-1"><a class="header-anchor" href="#_4-2-命令使用"><span>4.2. 命令使用</span></a></h3><ul><li><strong><code>git reset &lt;commit&gt;</code></strong>：将 HEAD 重置到指定的提交。</li><li><strong><code>git reset &lt;file&gt;</code></strong>：将工作树中的文件重置为与索引中相同的状态。</li><li><strong><code>git reset &lt;commit&gt; &lt;file&gt;</code></strong>：将文件从工作树中移除，并将索引中的文件重置为与指定提交中相同的状态。</li></ul><h3 id="_4-3-可选项" tabindex="-1"><a class="header-anchor" href="#_4-3-可选项"><span>4.3. 可选项</span></a></h3><ul><li><strong>--soft</strong>：只移动 HEAD 指针，不会改变索引或工作树中的任何文件。</li><li><strong>--hard</strong>：移动 HEAD 指针，并将索引和工作树中的文件重置为与指定提交中相同的状态。</li><li><strong>--merge</strong>：将索引中的文件重置为与指定提交中相同的状态，并尝试合并工作树中的文件。</li><li><strong>--patch</strong>：交互式选择要重置的文件的部分内容。</li></ul><h3 id="_4-4-操作步骤" tabindex="-1"><a class="header-anchor" href="#_4-4-操作步骤"><span>4.4. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 撤销最近的 n 次提交</span></span>
<span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD~1</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 创建新的提交</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Revert the previous commit&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 强制推送（修改了已推送的提交历史）</span></span>
<span class="line"><span class="token function">git</span> push <span class="token parameter variable">--force</span> <span class="token comment"># 或者 git push -f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-git-revert" tabindex="-1"><a class="header-anchor" href="#_5-git-revert"><span>5. git revert</span></a></h2><p><strong><code>git revert</code></strong>：此命令用于撤销一次或多次提交，但不同于 <code>git reset</code>，它通过创建一个新的提交来撤销指定提交的更改，而不是直接删除或修改历史记录。这意味着它不会改变项目的历史线，而是将撤销操作作为历史的一部分记录下来。</p><h3 id="_5-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_5-1-基本用法"><span>5.1. 基本用法</span></a></h3><ul><li><strong><code>git revert &lt;commit&gt;</code></strong>：撤销指定的单个提交，并创建一个新的提交来恢复到该提交之前的状态。</li><li><strong><code>git revert &lt;commit&gt;..&lt;commit&gt;</code></strong>：撤销一系列连续的提交。</li></ul><h3 id="_5-2-使用场景" tabindex="-1"><a class="header-anchor" href="#_5-2-使用场景"><span>5.2. 使用场景</span></a></h3><ul><li><strong>撤销已推送的提交</strong>：当需要撤销已经推送到远程仓库的提交时，使用 git revert 是一种安全的方式，因为它不会重写历史。</li><li><strong>修正错误</strong>：如果你发现之前的提交中存在错误，但又不想丢失这部分历史记录，可以使用 git revert 来撤销错误的更改。</li><li><strong>团队协作</strong>：在多人协作的项目中，使用 git revert 可以避免因重写历史而导致的协同工作混乱。</li></ul><h3 id="_5-3-操作步骤" tabindex="-1"><a class="header-anchor" href="#_5-3-操作步骤"><span>5.3. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 确定要撤销的提交</span></span>
<span class="line"><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span> <span class="token comment"># 或者 git revert &lt;commit&gt;..&lt;commit&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 解决冲突（如有）</span></span>
<span class="line"><span class="token comment"># 如果撤销操作导致冲突，Git 会暂停并要求你手动解决冲突</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 提交和推送变更，完成撤销操作</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;revert&#39;</span></span>
<span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#_6-git-cherry-pick"><span>6. git cherry-pick</span></a></h2><p><strong><code>git cherry-pick</code></strong> 用于将一个或多个提交应用到当前分支的最新提交之上，可以让你有选择地合并提交，并保留项目的完整历史记录。</p><h3 id="_6-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_6-1-基本用法"><span>6.1. 基本用法</span></a></h3><ul><li><strong><code>git cherry-pick &lt;commit&gt;</code></strong>：将指定的提交应用到当前分支的最新提交之上。</li><li><strong><code>git cherry-pick &lt;commit&gt;..&lt;commit&gt;</code></strong>：将一系列连续的提交应用到当前分支的最新提交之上。</li></ul><h3 id="_6-2-使用场景" tabindex="-1"><a class="header-anchor" href="#_6-2-使用场景"><span>6.2. 使用场景</span></a></h3><ul><li><strong>合并特定提交</strong>：当你只想将某个特定提交合并到当前分支，而不是整个分支时。</li><li><strong>修复已发布的版本</strong>：当你需要将一个修复提交应用到已经发布的版本分支上时。</li><li><strong>跨分支应用更改</strong>：当你需要将一个分支上的更改应用到另一个分支上时。</li></ul><h3 id="_6-3-操作步骤" tabindex="-1"><a class="header-anchor" href="#_6-3-操作步骤"><span>6.3. 操作步骤</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 将指定的提交应用到当前分支</span></span>
<span class="line"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 解决冲突（如有）</span></span>
<span class="line"><span class="token comment"># 如果 cherry-pick 导致冲突，git 会暂停并要求你手动解决冲突</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 推送变更，完成 cherry-pick 操作</span></span>
<span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-git-add-p" tabindex="-1"><a class="header-anchor" href="#_7-git-add-p"><span>7. git add -p</span></a></h2><p><strong><code>git add -p</code></strong> 用于交互式地添加文件或文件的部分内容到暂存区，可以让你挑选改动提交。</p><h3 id="_7-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_7-1-使用场景"><span>7.1. 使用场景</span></a></h3><ul><li><strong>精细控制提交内容</strong>：当你只想提交文件中的某些更改，而不是整个文件时。</li><li><strong>逐步提交</strong>：当你需要逐步添加文件的不同部分到暂存区时。</li><li><strong>解决冲突</strong>：在解决冲突后，使用 git add -p 可以选择性地添加解决冲突后的更改。</li></ul><h3 id="_7-2-操作步骤" tabindex="-1"><a class="header-anchor" href="#_7-2-操作步骤"><span>7.2. 操作步骤</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 1. 进入交互式模式</span>
<span class="line">git add -p</span>
<span class="line"></span>
<span class="line"># 2. 选择要添加的文件</span>
<span class="line"># 在交互式模式中，git 会列出所有未暂存的更改，并询问你是否要添加每个文件或文件的部分内容。如:</span>
<span class="line"># diff --git a/file.txt b/file.txt </span>
<span class="line"># index 1234567..7654321 100644 </span>
<span class="line"># --- a/file.txt </span>
<span class="line"># +++ b/file.txt </span>
<span class="line"># @@ -1,5 +1,6 @@ </span>
<span class="line">#  line1 </span>
<span class="line">#  line2 </span>
<span class="line"># -line3 </span>
<span class="line"># +line3 modified </span>
<span class="line">#  line4 </span>
<span class="line">#  line5 </span>
<span class="line"># (1/1) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]?</span>
<span class="line"></span>
<span class="line"># 3. 使用 git commit 提交暂存区中的更改</span>
<span class="line">git commit -m &#39;xxx&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在交互模式中， <code>Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]?</code> 的相关说明：</p><ul><li>hunk：是指每个更改</li><li>y (yes)：将当前 hunk 添加到暂存区</li><li>n (no)：不将当前 hunk 添加到暂存区</li><li>q (quit)：退出交互式模式</li><li>a (all)：将当前文件的所有 hunk 添加到暂存区</li><li>d：不将当前 hunk 和当前文件后续任何 hunk 添加到暂存区</li><li>j：让当前 hunk 未定，跳转下一个未定的 hunk</li><li>J：让当前 hunk 未定，跳转下一个 hunk</li><li>k：让当前 hunk 未定，跳转上一个未定的 hunk</li><li>K：让当前 hunk 未定，跳转上一个 hunk</li><li>g：选择当前文件中的 hunk 进行跳转</li><li>/：允许你输入一个字符串来搜索包含该字符串的 hunk</li><li>e (edit)：手动编辑当前改动</li><li>? (help)：显示帮助信息</li></ul><h2 id="_8-修改-gitignore-不生效" tabindex="-1"><a class="header-anchor" href="#_8-修改-gitignore-不生效"><span>8. 修改 .gitignore 不生效</span></a></h2><p>如果某些文件已经加入了版本管理，现在重新加入 .gitignore 是不生效的，需要执行下面的操作：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 针对某些文件</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> file1 file2 </span>
<span class="line"><span class="token comment"># 针对某些文件夹</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> dir1 dir2 </span>
<span class="line"><span class="token comment"># 针对所有文件</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-拉取远程的某个分支到本地" tabindex="-1"><a class="header-anchor" href="#_9-拉取远程的某个分支到本地"><span>9. 拉取远程的某个分支到本地</span></a></h2><p>在实际开发工作中，经常需要从远程仓库拉取特定的分支到本地进行开发或合并。 <strong>针对已经拉取了仓库的某个分支，需要拉取远程的其他某一个分支到本地，并且本地分支应跟踪远程分支的场景：</strong></p><ul><li>方法1：创建并切换到新的本地分支，并跟踪远程分支</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>local-branch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>remote-branch<span class="token operator">&gt;</span></span>
<span class="line">// 如：git checkout <span class="token parameter variable">-b</span> release origin/release</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法2：直接拉取远程分支到本地，并切换到新的本地分支</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>remote-branch<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>local-branch<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>local-branch<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># 如：</span></span>
<span class="line"><span class="token comment"># git pull origin release:release</span></span>
<span class="line"><span class="token comment"># git checkout release</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71)]))}const o=n(t,[["render",r]]),d=JSON.parse('{"path":"/blogs/technology/git-command/git-command.html","title":"Git 实战高效命令","lang":"en-US","frontmatter":{"title":"Git 实战高效命令","date":"2024-08-07","categories":["技术文档"],"tags":["Git"],"author":"Alan","publish":true},"headers":[{"level":2,"title":"1. git stash","slug":"_1-git-stash","link":"#_1-git-stash","children":[{"level":3,"title":"1.1. 使用场景","slug":"_1-1-使用场景","link":"#_1-1-使用场景","children":[]},{"level":3,"title":"1.2. 命令使用","slug":"_1-2-命令使用","link":"#_1-2-命令使用","children":[]},{"level":3,"title":"1.3. 操作步骤","slug":"_1-3-操作步骤","link":"#_1-3-操作步骤","children":[]}]},{"level":2,"title":"2. git pull --rebase","slug":"_2-git-pull-rebase","link":"#_2-git-pull-rebase","children":[{"level":3,"title":"2.1. 基本用法","slug":"_2-1-基本用法","link":"#_2-1-基本用法","children":[]},{"level":3,"title":"2.2. 使用场景","slug":"_2-2-使用场景","link":"#_2-2-使用场景","children":[]},{"level":3,"title":"2.3. 操作步骤","slug":"_2-3-操作步骤","link":"#_2-3-操作步骤","children":[]}]},{"level":2,"title":"3. git reflog","slug":"_3-git-reflog","link":"#_3-git-reflog","children":[{"level":3,"title":"3.1. 使用场景","slug":"_3-1-使用场景","link":"#_3-1-使用场景","children":[]},{"level":3,"title":"3.2. 操作步骤","slug":"_3-2-操作步骤","link":"#_3-2-操作步骤","children":[]}]},{"level":2,"title":"4. git reset","slug":"_4-git-reset","link":"#_4-git-reset","children":[{"level":3,"title":"4.1. 使用场景","slug":"_4-1-使用场景","link":"#_4-1-使用场景","children":[]},{"level":3,"title":"4.2. 命令使用","slug":"_4-2-命令使用","link":"#_4-2-命令使用","children":[]},{"level":3,"title":"4.3. 可选项","slug":"_4-3-可选项","link":"#_4-3-可选项","children":[]},{"level":3,"title":"4.4. 操作步骤","slug":"_4-4-操作步骤","link":"#_4-4-操作步骤","children":[]}]},{"level":2,"title":"5. git revert","slug":"_5-git-revert","link":"#_5-git-revert","children":[{"level":3,"title":"5.1. 基本用法","slug":"_5-1-基本用法","link":"#_5-1-基本用法","children":[]},{"level":3,"title":"5.2. 使用场景","slug":"_5-2-使用场景","link":"#_5-2-使用场景","children":[]},{"level":3,"title":"5.3. 操作步骤","slug":"_5-3-操作步骤","link":"#_5-3-操作步骤","children":[]}]},{"level":2,"title":"6. git cherry-pick","slug":"_6-git-cherry-pick","link":"#_6-git-cherry-pick","children":[{"level":3,"title":"6.1. 基本用法","slug":"_6-1-基本用法","link":"#_6-1-基本用法","children":[]},{"level":3,"title":"6.2. 使用场景","slug":"_6-2-使用场景","link":"#_6-2-使用场景","children":[]},{"level":3,"title":"6.3. 操作步骤","slug":"_6-3-操作步骤","link":"#_6-3-操作步骤","children":[]}]},{"level":2,"title":"7. git add -p","slug":"_7-git-add-p","link":"#_7-git-add-p","children":[{"level":3,"title":"7.1. 使用场景","slug":"_7-1-使用场景","link":"#_7-1-使用场景","children":[]},{"level":3,"title":"7.2. 操作步骤","slug":"_7-2-操作步骤","link":"#_7-2-操作步骤","children":[]}]},{"level":2,"title":"8. 修改 .gitignore 不生效","slug":"_8-修改-gitignore-不生效","link":"#_8-修改-gitignore-不生效","children":[]},{"level":2,"title":"9. 拉取远程的某个分支到本地","slug":"_9-拉取远程的某个分支到本地","link":"#_9-拉取远程的某个分支到本地","children":[]}],"git":{"createdTime":1744358690000,"updatedTime":1744358690000,"contributors":[{"name":"yanhui","email":"yhawsm@163.com","commits":1}]},"filePathRelative":"blogs/technology/git-command/git-command.md"}');export{o as comp,d as data};
