import{_ as i,c as s,e as o,a as e,b as r,d as n,o as a,r as g}from"./app-OBUVoyLF.js";const d="/assets/image-B--INPQt.png",u={},f={href:"https://www.tapd.cn/44062861/markdown_wikis/show/#1144062861001005465",target:"_blank",rel:"noopener noreferrer"};function w(m,t){const l=g("ExternalLinkIcon");return a(),s("div",null,[t[6]||(t[6]=o('<h2 id="开发模式" tabindex="-1"><a class="header-anchor" href="#开发模式"><span>开发模式</span></a></h2><p>为了实现发布功能可控，细化拆分任务的目标，形成统一的规范： <strong>产品 =&gt; 迭代 =&gt; 功能 =&gt; 任务</strong></p><ol><li>强调了<strong>功能</strong>的这个节点。 <ul><li>一个迭代包含多个功能</li><li>功能之间相对独立解耦，不存在依赖关系</li><li>功能作为集成上线的最小单位</li></ul></li><li>增加了<strong>任务</strong>节点 <ul><li>任务是研发侧的最小工作项单位</li><li>任务的最佳研发周期为 1~3天（基于接口协议开发，不包含联调）</li></ul></li></ol><h2 id="git-工作流" tabindex="-1"><a class="header-anchor" href="#git-工作流"><span>Git 工作流</span></a></h2><p>Git 工作流与传统 git flow 有所区别，根据当前开发情况做了适配和简化，具体如下：</p>',5)),e("ol",null,[t[3]||(t[3]=o("<li>只保留一个长期分支 <strong>release</strong></li><li>需要开发新<strong>功能</strong>时，执行以下操作： 2.1 从 release 检出相应的 <strong>feature</strong> 分支，如 feature/user-auth 2.2 根据<strong>功能</strong>所包含的<strong>任务</strong>，从 feature 分支检出相应的 <strong>task</strong> 分支进行开发，如 task/user-auth-core 2.3 在 task 分支完成开发后，发起 merge request ( 以下称 mr ) 到对应的 feature 分支，指派给对应的审查人进行 <strong>code review</strong> 2.4 根据 review 的反馈，在对应 task 分支进行修改，完成后再次提交，直至完成 review 意见修改为止（ 需要预留 review 时间 ） 2.5 如果开发任务非常紧急，而审查人又没有时间审查，为了不阻塞开发，可以后置审查 2.6 在 code review 通过后，task 分支的代码并入对应的 feature 分支，并且 task 分支自身被<strong>删除</strong></li><li>需要修复生产环境 bug 时，执行以下操作： 3.1 从 release 检出相应的 <strong>hotfix</strong> 分支进行修复，如 hotfix/pwd 3.2 从 hotfix 分支检出相应的 hotfix pr 分支进行开发，如 hotfix/pwd-pr 3.3 完成开发后，发起 mr 给对应的审查人进行 code review 3.4 与上述开发新功能时 code review 步骤相同</li><li>进入提测阶段，选择特定的<strong>功能分支</strong>合并为 <strong>test</strong> 分支，发布到测试环境</li>",4)),e("li",null,[t[1]||(t[1]=r("提测阶段的 bug 修复在对应的 feature 分支上进行（按照 ")),e("a",f,[t[0]||(t[0]=r("git commit 提交规范")),n(l)]),t[2]||(t[2]=r("，打上修复标识，不需要进行 code review），完成后将对应的 feature 分支合入 test 即可"))]),t[4]||(t[4]=e("li",null,[r("准备发布到生产环境，选择需要发布的"),e("strong",null,"功能分支"),r("，提起 mr 到 release 分支，指派给对应的审查人进行 code review")],-1)),t[5]||(t[5]=e("li",null,"与上述 code review 步骤相同，但此时 code review 关注点与开发阶段不同，重点关注测试阶段的修复提交以及是否会引入不良因素到生产环境中) 整体的开发流程如图所示：",-1))]),t[7]||(t[7]=e("p",null,[e("img",{src:d,alt:"alt text"})],-1))])}const k=i(u,[["render",w],["__file","git-workflow.html.vue"]]),h=JSON.parse('{"path":"/blogs/technology/git-workflow/git-workflow.html","title":"Git 研发工作流规范","lang":"en-US","frontmatter":{"title":"Git 研发工作流规范","date":"2024-04-15","categories":["技术文档"],"tags":["Git Workflow"],"author":"Alan","publish":true},"headers":[{"level":2,"title":"开发模式","slug":"开发模式","link":"#开发模式","children":[]},{"level":2,"title":"Git 工作流","slug":"git-工作流","link":"#git-工作流","children":[]}],"git":{"createdTime":1754455154000,"updatedTime":1754459054000,"contributors":[{"name":"yanhui","email":"yhalxh@163.com","commits":3}]},"filePathRelative":"blogs/technology/git-workflow/git-workflow.md"}');export{k as comp,h as data};
